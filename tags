!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
COROUTINE_DEAD	coroutine.h	/^    COROUTINE_DEAD$/;"	e	enum:__anon2
COROUTINE_H_	coroutine.h	2;"	d
COROUTINE_READY	coroutine.h	/^    COROUTINE_READY = 0,$/;"	e	enum:__anon2
COROUTINE_RUNNING	coroutine.h	/^    COROUTINE_RUNNING,$/;"	e	enum:__anon2
COROUTINE_SPECIFIC_CAPCITY	coroutine.c	30;"	d	file:
COROUTINE_STACK_COUNT	coroutine.c	16;"	d	file:
COROUTINE_STACK_COUNT	coroutine.c	18;"	d	file:
COROUTINE_STACK_SIZE	coroutine.c	10;"	d	file:
COROUTINE_STACK_SIZE	coroutine.c	12;"	d	file:
COROUTINE_SUSPEND	coroutine.h	/^    COROUTINE_SUSPEND,$/;"	e	enum:__anon2
DBG_LOG	coroutine.h	9;"	d
EPOLL_WAIT_TIMEOUT	thread_env.h	9;"	d
EVENT_H_	event.h	2;"	d
HOOK_H_	hook/hook.h	2;"	d
HOOK_SYS_CALL	hook/hook.c	9;"	d	file:
HOOK_SYS_CALL	sys_hook.c	25;"	d	file:
INNER_FD_H_	inner_fd.h	2;"	d
INVALID_FD	inner_fd.c	7;"	d	file:
MAX_ERROR_BUFFER_SIZE	defines.h	52;"	d
MAX_EVENTS_SIZE	thread_env.h	8;"	d
MAX_FD_NUM	inner_fd.c	8;"	d	file:
MIN_TIME_WHEEL_INTERVAL	time_wheel.c	9;"	d	file:
MIN_TIME_WHEEL_SIZE	time_wheel.c	8;"	d	file:
SCHEDULER_COROUTINE_MAX_SIZE	coroutine.c	29;"	d	file:
SCHEDULER_STACK_POOL_MODE	coroutine.c	23;"	d	file:
SCHEDULER_STACK_POOL_MODE	coroutine.c	25;"	d	file:
STACK_POOL_H_	stack_pool.h	2;"	d
STACK_POOL_ON_ARRAY	stack_pool.h	/^    STACK_POOL_ON_ARRAY = 0,$/;"	e	enum:__anon1
STACK_POOL_ON_LIST	stack_pool.h	/^    STACK_POOL_ON_LIST$/;"	e	enum:__anon1
STATUS	coroutine.c	36;"	d	file:
TASK_DEFINES_H_	defines.h	2;"	d
TASK_LIST_H_	list.h	2;"	d
THREAD_ENV_H_	thread_env.h	2;"	d
TIME_WHEEL_H_	time_wheel.h	2;"	d
_GNU_SOURCE	hook/hook.c	1;"	d	file:
_GNU_SOURCE	sys_hook.c	1;"	d	file:
_co_inner_func	coroutine.c	/^void _co_inner_func(void) {    $/;"	f
_coroutine	coroutine.c	/^struct _coroutine {$/;"	s	file:
_epoll_st	event.c	/^struct _epoll_st { $/;"	s	file:
_error_buffer	defines.h	/^__thread char *_error_buffer = NULL;$/;"	v
_inner_fd_st	inner_fd.h	/^struct _inner_fd_st {$/;"	s
_list_add	list.h	13;"	d
_list_delete	list.h	19;"	d
_list_st	list.h	/^struct _list_st {$/;"	s
_offset	list.h	11;"	d
_proxy_func_	coroutine.c	/^void _proxy_func_(void* c, void* p) {$/;"	f
_scheduler	coroutine.c	/^struct _scheduler {$/;"	s	file:
_stack_pool_st	stack_pool.c	/^struct _stack_pool_st {$/;"	s	file:
_stack_st	stack_pool.h	/^struct _stack_st{$/;"	s
_status_strs	coroutine.c	/^const char* _status_strs[] = { "Ready", "Running", "Suspend", "Dead" };$/;"	v
_time_wheel_st	time_wheel.h	/^struct _time_wheel_st {$/;"	s
_timeout_task	event.c	/^void _timeout_task(void *ip, void *op) {$/;"	f
accept	sys_hook.c	/^int accept(int sockfd, struct sockaddr *address, socklen_t *address_len) {$/;"	f
accept_pfn_t	sys_hook.c	/^typedef int (*accept_pfn_t)(int sockfd, struct sockaddr *address, socklen_t *address_len);$/;"	t	file:
add_events	event.c	/^int add_events(epoll_t *ep, int fd, int events) {$/;"	f
alloc_id	stack_pool.c	/^    size_t alloc_id;$/;"	m	struct:__anon4	file:
alloc_isolate_stack	stack_pool.c	/^stack_st* alloc_isolate_stack(stack_pool_st* pool, size_t stack_size) {$/;"	f
alloc_stack	stack_pool.c	/^stack_st* alloc_stack(stack_pool_st* pool) {$/;"	f
alloc_stack_from_array	stack_pool.c	/^stack_st* alloc_stack_from_array(stack_array_st* array) {$/;"	f
alloc_stack_from_list	stack_pool.c	/^stack_st* alloc_stack_from_list(stack_list_st* list) {$/;"	f
beg	stack_pool.c	/^    stack_st* beg;$/;"	m	struct:__anon3	file:
betimeout	inner_fd.h	/^    bool betimeout;$/;"	m	struct:_inner_fd_st
bool	defines.h	/^typedef int bool;$/;"	t
buffer	stack_pool.h	/^    char* buffer;$/;"	m	struct:_stack_st
callback	test_main.c	/^void callback() {$/;"	f
cb	coroutine.c	/^    cocb_t cb;$/;"	m	struct:_coroutine	file:
close	sys_hook.c	/^int close(int fd) {$/;"	f
close_all_inner_fd	inner_fd.c	/^void close_all_inner_fd() {$/;"	f
close_pfn_t	sys_hook.c	/^typedef int (*close_pfn_t)(int fd);$/;"	t	file:
cntl_events	event.c	/^int cntl_events(epoll_t *ep, int op, int fd, int events) {$/;"	f
co_alloc_key	defines.h	34;"	d
co_array	coroutine.c	/^    coroutine** co_array;$/;"	m	struct:_scheduler	file:
co_capcity	coroutine.c	/^    size_t co_capcity;$/;"	m	struct:_scheduler	file:
co_disable_hook	sys_hook.c	/^void co_disable_hook() {$/;"	f
co_enable_hook	sys_hook.c	/^void co_enable_hook() {$/;"	f
co_env_destory	defines.h	45;"	d
co_env_init	defines.h	44;"	d
co_get_value	defines.h	36;"	d
co_hooked	sys_hook.c	/^bool co_hooked() {$/;"	f
co_main	coroutine.c	/^    coroutine* co_main;$/;"	m	struct:_scheduler	file:
co_resume	defines.h	30;"	d
co_self	defines.h	29;"	d
co_set_value	defines.h	35;"	d
co_size	coroutine.c	/^    size_t co_size;$/;"	m	struct:_scheduler	file:
co_yield	defines.h	33;"	d
cocb_t	coroutine.h	/^typedef void(*cocb_t)();$/;"	t
cofunc_t	coroutine.h	/^typedef void(*cofunc_t)(void*, void*);$/;"	t
connect	sys_hook.c	/^int connect(int sockfd, const struct sockaddr *address, socklen_t address_len) {$/;"	f
connect_pfn_t	sys_hook.c	/^typedef int (*connect_pfn_t)(int sockfd, const struct sockaddr *address, socklen_t address_len);$/;"	t	file:
context	coroutine.c	/^    ucontext_t context;$/;"	m	struct:_coroutine	file:
coroutine	coroutine.h	/^typedef struct _coroutine coroutine;$/;"	t	typeref:struct:_coroutine
coroutine_create_specific_key	coroutine.c	/^int coroutine_create_specific_key() {$/;"	f
coroutine_die	coroutine.c	/^void coroutine_die() {$/;"	f
coroutine_disable_hook	coroutine.c	/^void coroutine_disable_hook(coroutine *c) {$/;"	f
coroutine_enable_hook	coroutine.c	/^void coroutine_enable_hook(coroutine *c) {$/;"	f
coroutine_get_specific	coroutine.c	/^void* coroutine_get_specific(int key) {$/;"	f
coroutine_hooked	coroutine.c	/^int coroutine_hooked(coroutine *c) {$/;"	f
coroutine_proxy	coroutine.c	/^void coroutine_proxy(coroutine* curr, coroutine* pendding) {$/;"	f
coroutine_resume	coroutine.c	/^void coroutine_resume(coroutine* c) {$/;"	f
coroutine_set_callback	coroutine.c	/^void coroutine_set_callback(coroutine *c, cocb_t cb) {$/;"	f
coroutine_set_specific	coroutine.c	/^int coroutine_set_specific(int key, void* value) {$/;"	f
coroutine_swap	coroutine.c	/^void coroutine_swap(coroutine* curr, coroutine* pendding) {$/;"	f
coroutine_yield	coroutine.c	/^void coroutine_yield() {$/;"	f
create_coroutine	coroutine.c	/^coroutine* create_coroutine(scheduler* shed, cofunc_t f, void* ip, void* op) {$/;"	f
create_scheduler	coroutine.c	/^scheduler* create_scheduler(size_t cocap, size_t stack_count, size_t stack_size) {$/;"	f
create_stack	stack_pool.c	/^stack_st* create_stack(size_t size) {$/;"	f
create_stack_array	stack_pool.c	/^stack_array_st* create_stack_array(size_t count, size_t size) {$/;"	f
create_stack_list	stack_pool.c	/^stack_list_st* create_stack_list(size_t list_size, size_t stack_size) {$/;"	f
create_stack_pool	stack_pool.c	/^stack_pool_st* create_stack_pool(pool_mode_t mode, size_t count, size_t stack_size) {$/;"	f
cur	stack_pool.c	/^    stack_st* cur;$/;"	m	struct:__anon3	file:
current_coroutine	coroutine.c	/^coroutine* current_coroutine() {$/;"	f
current_scheduler	coroutine.c	/^scheduler* current_scheduler() {$/;"	f
delete_epoll	event.c	/^void delete_epoll(epoll_t *ep) {$/;"	f
delete_events	event.c	/^int delete_events(epoll_t *ep, int fd, int events) {$/;"	f
delete_inner_fd	inner_fd.c	/^void delete_inner_fd(int fd) {$/;"	f
delete_task	defines.h	42;"	d
delete_time_wheel	time_wheel.c	/^void delete_time_wheel(time_wheel_t *tw) {$/;"	f
destory_thread_env	thread_env.h	/^void destory_thread_env() {$/;"	f
disable_hook	hook/hook.c	/^void disable_hook() { hooked = 0; }$/;"	f
dperror	defines.h	/^void dperror(int ret) {$/;"	f
enable_hook	hook/hook.c	/^void enable_hook() { hooked = 1; }$/;"	f
end	stack_pool.c	/^    stack_st* end;$/;"	m	struct:__anon3	file:
epoll_t	event.h	/^typedef struct _epoll_st epoll_t;$/;"	t	typeref:struct:_epoll_st
event_loop	event.c	/^int event_loop(epoll_t *ep) {$/;"	f
events	event.c	/^    struct epoll_event *events;$/;"	m	struct:_epoll_st	typeref:struct:_epoll_st::epoll_event	file:
false	defines.h	50;"	d
fd	event.c	/^    int fd;$/;"	m	struct:_epoll_st	file:
fd	inner_fd.h	/^    int fd;$/;"	m	struct:_inner_fd_st
fd	time_wheel.h	/^    int fd;$/;"	m	struct:_time_wheel_st
flags	inner_fd.h	/^    int flags;$/;"	m	struct:_inner_fd_st
foo	test_main.c	/^void foo(void* ip, void* op) {$/;"	f
free_coroutine	coroutine.c	/^void free_coroutine(coroutine* c) {$/;"	f
free_scheduler	coroutine.c	/^void free_scheduler(scheduler* s) {$/;"	f
free_stack	stack_pool.c	/^void free_stack(stack_st* stk) {$/;"	f
free_stack_array	stack_pool.c	/^void free_stack_array(stack_array_st* sp) {$/;"	f
free_stack_list	stack_pool.c	/^void free_stack_list(stack_list_st* list) {$/;"	f
free_stack_pool	stack_pool.c	/^void free_stack_pool(stack_pool_st* pool) {$/;"	f
func	coroutine.c	/^    cofunc_t func;$/;"	m	struct:_coroutine	file:
g_epoll	thread_env.h	/^__thread epoll_t* g_epoll = NULL;$/;"	v
g_inner_fd_list	inner_fd.c	/^inner_fd* g_inner_fd_list[MAX_FD_NUM] = {0};$/;"	v
g_scheduler	coroutine.c	/^__thread scheduler* g_scheduler = NULL;$/;"	v
get_inner_fd	inner_fd.c	/^inner_fd* get_inner_fd(int fd) {$/;"	f
get_thread_epoll	thread_env.h	/^epoll_t* get_thread_epoll() {$/;"	f
goo	test_main.c	/^void goo(void* ip, void* op) {$/;"	f
hook	coroutine.c	/^    volatile int hook;$/;"	m	struct:_coroutine	file:
hook_accept_pfn	sys_hook.c	/^static accept_pfn_t  hook_accept_pfn  = NULL; $/;"	v	file:
hook_close_pfn	sys_hook.c	/^static close_pfn_t   hook_close_pfn   = NULL; $/;"	v	file:
hook_connect_pfn	sys_hook.c	/^static connect_pfn_t hook_connect_pfn = NULL; $/;"	v	file:
hook_malloc_pfn	hook/hook.c	/^static malloc_pfn_t hook_malloc_pfn = 0;$/;"	v	file:
hook_read_pfn	sys_hook.c	/^static read_pfn_t    hook_read_pfn    = NULL; $/;"	v	file:
hook_socket_pfn	sys_hook.c	/^static socket_pfn_t  hook_socket_pfn  = NULL; $/;"	v	file:
hook_write_pfn	sys_hook.c	/^static write_pfn_t   hook_write_pfn   = NULL; $/;"	v	file:
hooked	hook/hook.c	/^volatile int hooked = 0;$/;"	v
init_epoll_timer	event.c	/^void init_epoll_timer(epoll_t *ep, size_t sec_size, size_t interval) {$/;"	f
init_thread_env	thread_env.h	/^epoll_t *init_thread_env() {$/;"	f
inner	coroutine.c	/^    char inner;$/;"	m	struct:_coroutine	file:
inner_fd	inner_fd.h	/^typedef struct _inner_fd_st inner_fd;$/;"	t	typeref:struct:_inner_fd_st
interval	time_wheel.h	/^    size_t interval;$/;"	m	struct:_time_wheel_st
iparam	coroutine.c	/^    void* iparam;$/;"	m	struct:_coroutine	file:
is_fd_valid	inner_fd.c	/^bool is_fd_valid(int fd) {$/;"	f
is_hooked	hook/hook.c	/^int is_hooked() { return hooked; }$/;"	f
is_list	stack_pool.c	/^    stack_list_st* is_list;$/;"	m	struct:_stack_pool_st	file:
link	inner_fd.h	/^    list_t link;$/;"	m	struct:_inner_fd_st
list_add	list.h	/^inline void list_add(list_t *ls, list_t *elm) {$/;"	f
list_add_after	list.h	/^inline void list_add_after(list_t *ls, list_t *elm) {$/;"	f
list_add_before	list.h	/^inline void list_add_before(list_t *ls, list_t *elm) {$/;"	f
list_delete	list.h	/^inline void list_delete(list_t *elm) {$/;"	f
list_empty	list.h	/^inline int list_empty(list_t *ls) {$/;"	f
list_init	list.h	/^inline void list_init(list_t *ls) {$/;"	f
list_next	list.h	/^inline list_t* list_next(list_t *ls) {$/;"	f
list_prev	list.h	/^inline list_t* list_prev(list_t *ls) {$/;"	f
list_t	list.h	/^typedef struct _list_st list_t;$/;"	t	typeref:struct:_list_st
list_to_inner_fd	inner_fd.h	17;"	d
list_to_struct	list.h	12;"	d
loc	time_wheel.h	/^    int loc;$/;"	m	struct:_time_wheel_st
loop	event.c	/^    bool loop;$/;"	m	struct:_epoll_st	file:
main	hook/test.c	/^int main() {$/;"	f
main	main.c	/^int main() {$/;"	f
main	test_main.c	/^int main () {$/;"	f
main_coroutine	coroutine.c	/^coroutine* main_coroutine() {$/;"	f
malloc	hook/hook.c	/^void* malloc(size_t size) {$/;"	f
malloc_pfn_t	hook/hook.c	/^typedef void* (*malloc_pfn_t)(size_t size);$/;"	t	file:
maxevents	event.c	/^    size_t maxevents;$/;"	m	struct:_epoll_st	file:
mode	stack_pool.c	/^    pool_mode_t mode;$/;"	m	struct:_stack_pool_st	file:
modify_events	event.c	/^int modify_events(epoll_t *ep, int fd, int events) {$/;"	f
new_epoll	event.c	/^epoll_t* new_epoll(size_t maxevents, int timeout) {$/;"	f
new_inner_fd	inner_fd.c	/^inner_fd* new_inner_fd(int fd) {$/;"	f
new_task	defines.h	/^task_t* new_task(cofunc_t f, void* ip, void* op, cocb_t cb ) {$/;"	f
new_time_wheel	time_wheel.c	/^time_wheel_t* new_time_wheel(size_t size, size_t interval) {$/;"	f
next	list.h	/^    struct _list_st *next;$/;"	m	struct:_list_st	typeref:struct:_list_st::_list_st
next	stack_pool.h	/^    struct _stack_st* next;$/;"	m	struct:_stack_st	typeref:struct:_stack_st::_stack_st
occupy	stack_pool.h	/^    coroutine* occupy;$/;"	m	struct:_stack_st
oparam	coroutine.c	/^    void* oparam;    $/;"	m	struct:_coroutine	file:
poll	event.c	/^int poll(epoll_t* ep, int fd, int events) {$/;"	f
pool_mode_t	stack_pool.h	/^} pool_mode_t;$/;"	t	typeref:enum:__anon1
pop_coroutine	coroutine.c	/^coroutine* pop_coroutine() {$/;"	f
prev	list.h	/^    struct _list_st *prev;$/;"	m	struct:_list_st	typeref:struct:_list_st::_list_st
previous_coroutine	coroutine.c	/^coroutine* previous_coroutine() {$/;"	f
push_coroutine	coroutine.c	/^void push_coroutine(coroutine* c) {$/;"	f
read	sys_hook.c	/^int read(int fd, void *buffer, size_t n) {$/;"	f
read_pfn_t	sys_hook.c	/^typedef int (*read_pfn_t)(int fd, void *buffer, size_t n);$/;"	t	file:
realloc_coroutine_stack	coroutine.c	/^stack_st* realloc_coroutine_stack(coroutine* c) {$/;"	f
recover_coroutine_stack	coroutine.c	/^void recover_coroutine_stack(coroutine* c) {$/;"	f
reset_coroutine	coroutine.c	/^coroutine* reset_coroutine(scheduler* shed, coroutine* c, cofunc_t f, void* ip, void* op) {$/;"	f
reuse_task	defines.h	/^int reuse_task(task_t* tp, cofunc_t f, void* ip, void* op, cocb_t cb) {$/;"	f
save_coroutine_stack	coroutine.c	/^void save_coroutine_stack(coroutine* c) {$/;"	f
scheduler	coroutine.h	/^typedef struct _scheduler scheduler;$/;"	t	typeref:struct:_scheduler
sh_array	stack_pool.c	/^    stack_array_st* sh_array;$/;"	m	struct:_stack_pool_st	file:
sh_list	stack_pool.c	/^    stack_list_st* sh_list;$/;"	m	struct:_stack_pool_st	file:
sh_size	stack_pool.c	/^    size_t sh_size;$/;"	m	struct:__anon4	file:
sh_stacks	stack_pool.c	/^    stack_st** sh_stacks;$/;"	m	struct:__anon4	file:
shared	stack_pool.h	/^    char shared;$/;"	m	struct:_stack_st
size	stack_pool.c	/^    size_t size;$/;"	m	struct:__anon3	file:
size	stack_pool.h	/^    size_t size;$/;"	m	struct:_stack_st
size	time_wheel.h	/^    size_t size;$/;"	m	struct:_time_wheel_st
snapshot	coroutine.c	/^    char* snapshot;$/;"	m	struct:_coroutine	file:
snapshot_capcity	coroutine.c	/^    size_t snapshot_capcity;$/;"	m	struct:_coroutine	file:
snapshot_size	coroutine.c	/^    size_t snapshot_size;$/;"	m	struct:_coroutine	file:
socket	sys_hook.c	/^int socket(int domain, int type, int protocol) {$/;"	f
socket_pfn_t	sys_hook.c	/^typedef int (*socket_pfn_t)(int domain, int type, int protocol);$/;"	t	file:
spec	coroutine.c	/^    void** spec;$/;"	m	struct:_coroutine	file:
spec_size	coroutine.c	/^    size_t spec_size;$/;"	m	struct:_coroutine	file:
spool	coroutine.c	/^    stack_pool_st* spool;$/;"	m	struct:_scheduler	file:
stack	coroutine.c	/^    stack_st* stack;$/;"	m	struct:_coroutine	file:
stack_array_st	stack_pool.c	/^} stack_array_st;$/;"	t	typeref:struct:__anon4	file:
stack_bp	stack_pool.h	/^    char* stack_bp;$/;"	m	struct:_stack_st
stack_list_append	stack_pool.c	/^void stack_list_append(stack_list_st* list, stack_st* stk) {$/;"	f
stack_list_st	stack_pool.c	/^} stack_list_st;$/;"	t	typeref:struct:__anon3	file:
stack_pool_st	stack_pool.h	/^typedef struct _stack_pool_st stack_pool_st;$/;"	t	typeref:struct:_stack_pool_st
stack_sp	coroutine.c	/^    char* stack_sp;$/;"	m	struct:_coroutine	file:
stack_st	stack_pool.h	/^typedef struct _stack_st      stack_st;$/;"	t	typeref:struct:_stack_st
status	coroutine.c	/^    status_t status;$/;"	m	struct:_coroutine	file:
status_t	coroutine.h	/^} status_t;$/;"	t	typeref:enum:__anon2
stop_event_loop	event.c	/^void stop_event_loop(epoll_t* ep) {$/;"	f
task	inner_fd.h	/^    task_t* task; \/\/only set it when read \/ write fd$/;"	m	struct:_inner_fd_st
task_t	defines.h	/^typedef coroutine task_t;$/;"	t
time_wheel_t	time_wheel.h	/^typedef struct _time_wheel_st time_wheel_t;$/;"	t	typeref:struct:_time_wheel_st
timeout	event.c	/^    int timeout;$/;"	m	struct:_epoll_st	file:
timeout	inner_fd.h	/^    int timeout;$/;"	m	struct:_inner_fd_st
timer	event.c	/^    time_wheel_t* timer;$/;"	m	struct:_epoll_st	file:
true	defines.h	49;"	d
warnf	defines.h	/^void warnf(const char *buf) {$/;"	f
wheel	time_wheel.h	/^    list_t *wheel;    $/;"	m	struct:_time_wheel_st
wheel_delete_element	time_wheel.c	/^void wheel_delete_element(list_t *elm) {$/;"	f
wheel_rotate	time_wheel.c	/^void wheel_rotate(time_wheel_t *tw) {$/;"	f
wheel_timeout_list	time_wheel.c	/^list_t* wheel_timeout_list(time_wheel_t *tw) {$/;"	f
wheel_update_element	time_wheel.c	/^void wheel_update_element(time_wheel_t *tw, list_t *elm, int timeout) {$/;"	f
write	sys_hook.c	/^int write(int fd, const void *buffer, size_t n) {$/;"	f
write_pfn_t	sys_hook.c	/^typedef int (*write_pfn_t)(int fd, const void *buffer, size_t n);$/;"	t	file:
